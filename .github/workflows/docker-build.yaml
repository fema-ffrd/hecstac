name: Docker Build

on:
  workflow_call:
    inputs:
      push_to_registry:
        type: boolean
        default: false
        required: false
      version:
        type: string
        required: true
      branch:
        type: string
        required: true
      platforms:
        type: string
        default: 'linux/amd64'
        required: false
    outputs:
      image_tag:
        description: 'Docker image tags'
        value: ${{ jobs.build-docker.outputs.image_tag }}

permissions:
  contents: read
  packages: write

jobs:
  build-docker:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # tag events
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # branch events - dev branch gets dev tag
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            # main branch gets latest tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # PR builds get a unique tag based on PR number and commit
            type=ref,event=pr

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: inputs.push_to_registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push_to_registry }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
