name: Python Build

on:
  workflow_call:
    inputs:
      run_tests:
        type: boolean
        default: true
        required: false
        description: "Whether to run tests"
      python_versions:
        type: string
        default: '["3.10", "3.11", "3.12"]'
        required: false
        description: "JSON array of Python versions to test against"

permissions:
  contents: read

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python_versions) }}
        os: ["ubuntu-latest"]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build toml ruff pytest

    - name: Build wheel and source distribution
      run: python -m build

    - name: Install the built wheel
      run: |
        python -c "import glob; import subprocess; wheel_files = glob.glob('dist/*.whl'); subprocess.check_call(['pip', 'install', wheel_files[0]])"

    - name: Lint (ruff)
      run: |
        ruff check .
        ruff format --check

    - name: Run tests
      if: inputs.run_tests
      runs-on: "ubuntu-latest"
      defaults:
        run:
          shell: bash -el {0}
      steps:
        - uses: actions/checkout@v4
        - uses: conda-incubator/setup-miniconda@v3
          with:
            miniforge-variant: Mambaforge
            activate-environment: anaconda-client-env
            environment-file: tests/environment.yml
            auto-activate-base: false
        - name: Run pytest
          run: |
            pytest tests/
